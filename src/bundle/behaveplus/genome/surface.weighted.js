export const genome = [
  [
    'surface.weighted.fire.primaryCover',
    [
      ['FuelCoverFraction'],
      [
        ['when', 'configure.fuel.secondary', 'equals', 'none', 'Dag.fixed', 1],
        ['finally', 'Dag.input']
      ]
    ]
  ],
  // These are all bound to the primary surface fuel
  [
    'surface.weighted.fire.effectiveWindSpeed',
    [
      ['WindSpeed'],
      [['finally', 'Dag.bind', 'surface.primary.fuel.fire.effectiveWindSpeed']]
    ]
  ],
  [
    'surface.weighted.fire.heading.fromUpslope',
    [
      ['CompassAzimuth'],
      [['finally', 'Dag.bind', 'surface.primary.fuel.fire.heading.fromUpslope']]
    ]
  ],
  [
    'surface.weighted.fire.heading.fromNorth',
    [
      ['CompassAzimuth'],
      [['finally', 'Dag.bind', 'surface.primary.fuel.fire.heading.fromNorth']]
    ]
  ],
  [
    'surface.weighted.fire.lengthToWidthRatio',
    [
      ['FireLengthToWidthRatio'],
      [['finally', 'Dag.bind', 'surface.primary.fuel.fire.lengthToWidthRatio']]
    ]
  ],
  [
    'surface.weighted.fire.wind.speed.atMidflame',
    [
      ['WindSpeed'],
      [
        [
          'finally',
          'Dag.bind',
          'surface.primary.fuel.fire.wind.speed.atMidflame'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.windSpeedAdjustmentFactor',
    [
      ['WindSpeedAdjustmentFactor'],
      [
        [
          'finally',
          'Dag.bind',
          'surface.primary.fuel.fire.windSpeedAdjustmentFactor'
        ]
      ]
    ]
  ],
  // These use the maximum of the primary or secondary fuel
  [
    'surface.weighted.fire.firelineIntensity',
    [
      ['FireFirelineIntensity'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.firelineIntensity'
        ],
        [
          'finally',
          'Math.max',
          'surface.primary.fuel.fire.firelineIntensity',
          'surface.secondary.fuel.fire.firelineIntensity'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.flameLength',
    [
      ['FireFlameLength'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.flameLength'
        ],
        [
          'finally',
          'Math.max',
          'surface.primary.fuel.fire.flameLength',
          'surface.secondary.fuel.fire.flameLength'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.heatPerUnitArea',
    [
      ['FireHeatPerUnitArea'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.heatPerUnitArea'
        ],
        [
          'finally',
          'Math.max',
          'surface.primary.fuel.fire.heatPerUnitArea',
          'surface.secondary.fuel.fire.heatPerUnitArea'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.reactionIntensity',
    [
      ['FireReactionIntensity'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.reactionIntensity'
        ],
        [
          'finally',
          'Math.max',
          'surface.primary.fuel.fire.reactionIntensity',
          'surface.secondary.fuel.fire.reactionIntensity'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.scorchHeight',
    [
      ['FireScorchHeight'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.scorchHeight'
        ],
        [
          'finally',
          'Math.max',
          'surface.primary.fuel.fire.scorchHeight',
          'surface.secondary.fuel.fire.scorchHeight'
        ]
      ]
    ]
  ],
  // If either limit is execeeded
  [
    'surface.weighted.fire.limit.effectiveWindSpeed.exceeded',
    [
      ['Bool'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.limit.effectiveWindSpeed.exceeded'
        ],
        [
          'finally',
          'Calc.or',
          'surface.primary.fuel.fire.limit.effectiveWindSpeed.exceeded',
          'surface.secondary.fuel.fire.limit.effectiveWindSpeed.exceeded'
        ]
      ]
    ]
  ],
  // This uses the minimum of the primary or secondary fuel
  [
    'surface.weighted.fire.limit.effectiveWindSpeed',
    [
      ['WindSpeed'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.limit.effectiveWindSpeed'
        ],
        [
          'finally',
          'Math.min',
          'surface.primary.fuel.fire.limit.effectiveWindSpeed',
          'surface.secondary.fuel.fire.limit.effectiveWindSpeed'
        ]
      ]
    ]
  ],
  // Weighted spread rates
  [
    'surface.weighted.fire.spreadRate',
    [
      ['FireSpreadRate'],
      [
        [
          'when',
          'configure.fire.weightingMethod',
          'equals',
          'expected',
          'Dag.bind',
          'surface.weighted.fire.expectedValue.spreadRate'
        ],
        [
          'when',
          'configure.fire.weightingMethod',
          'equals',
          'harmonic',
          'Dag.bind',
          'surface.weighted.fire.harmonicMean.spreadRate'
        ],
        [
          'finally',
          'Dag.bind',
          'surface.weighted.fire.arithmeticMean.spreadRate'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.arithmeticMean.spreadRate',
    [
      ['FireSpreadRate'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.spreadRate'
        ],
        [
          'finally',
          'SurfaceFire.arithmeticMeanSpreadRate',
          'surface.weighted.fire.primaryCover',
          'surface.primary.fuel.fire.spreadRate',
          'surface.secondary.fuel.fire.spreadRate'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.expectedValue.spreadRate',
    [
      ['FireSpreadRate'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.spreadRate'
        ],
        [
          'finally',
          'SurfaceFire.expectedValueSpreadRateMOCK',
          'surface.weighted.fire.primaryCover',
          'surface.primary.fuel.fire.spreadRate',
          'surface.secondary.fuel.fire.spreadRate'
        ]
      ]
    ]
  ],
  [
    'surface.weighted.fire.harmonicMean.spreadRate',
    [
      ['FireSpreadRate'],
      [
        [
          'when',
          'configure.fuel.secondary',
          'equals',
          'none',
          'Dag.bind',
          'surface.primary.fuel.fire.spreadRate'
        ],
        [
          'finally',
          'SurfaceFire.harmonicMeanSpreadRate',
          'surface.weighted.fire.primaryCover',
          'surface.primary.fuel.fire.spreadRate',
          'surface.secondary.fuel.fire.spreadRate'
        ]
      ]
    ]
  ]
]
