import { Blob, Count, Index, Float, Quantity, Slope, Text } from '../../../pando/index.js'
import * as V from '../Variants.js'

test('CompassAzimuth', () => {
  const v = new V.CompassAzimuth()
  expect(v._specs._minimumValue).toEqual(0)
  expect(v._specs._maximumValue).toEqual(360)
  expect(v.uomKeys()).toEqual(['deg'])
})

test('Variant constructors', () => {
  expect(new V.Factor() instanceof Float).toEqual(true)
  expect(new V.NonNegativeFactor() instanceof Float).toEqual(true)
  expect(new V.Fraction() instanceof Quantity).toEqual(true)
  expect(new V.AirTemperature() instanceof Quantity).toEqual(true)
  expect(new V.CrownFillFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.CrownFireActiveRatio() instanceof V.NonNegativeFactor).toEqual(true)
  expect(new V.CrownFireBurnedFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.CrownRatioFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.CrownTransitionRatio() instanceof V.NonNegativeFactor).toEqual(true)
  expect(new V.Documentation() instanceof Text).toEqual(true)
  expect(new V.FireArea() instanceof Quantity).toEqual(true)
  expect(new V.FireDampingCoefficient() instanceof V.Fraction).toEqual(true)
  expect(new V.FireElapsedTime() instanceof Quantity).toEqual(true)
  expect(new V.FireFirelineIntensity() instanceof Quantity).toEqual(true)
  expect(new V.FireFlameDuration() instanceof Quantity).toEqual(true)
  expect(new V.FireFlameLength() instanceof Quantity).toEqual(true)
  expect(new V.FireHeatPerUnitArea() instanceof Quantity).toEqual(true)
  expect(new V.FireLengthToWidthRatio() instanceof V.Factor).toEqual(true)
  expect(new V.FirePower() instanceof Quantity).toEqual(true)
  expect(new V.FirePowerRatio() instanceof V.NonNegativeFactor).toEqual(true)
  expect(new V.FirePropagatingFluxRatio() instanceof V.Fraction).toEqual(true)
  expect(new V.FireReactionIntensity() instanceof Quantity).toEqual(true)
  expect(new V.FireReactionVelocity() instanceof Quantity).toEqual(true)
  expect(new V.FireResidenceTime() instanceof Quantity).toEqual(true)
  expect(new V.FireScorchHeight() instanceof Quantity).toEqual(true)
  expect(new V.FireSpotDistance() instanceof Quantity).toEqual(true)
  expect(new V.FireSpreadDistance() instanceof Quantity).toEqual(true)
  expect(new V.FireSpreadRate() instanceof Quantity).toEqual(true)
  expect(new V.FuelAge() instanceof Quantity).toEqual(true)
  expect(new V.FuelBasalArea() instanceof Quantity).toEqual(true)
  expect(new V.FuelBedBulkDensity() instanceof Quantity).toEqual(true)
  expect(new V.FuelBedDepth() instanceof Quantity).toEqual(true)
  expect(new V.FuelBedHeatOfPreignition() instanceof Quantity).toEqual(true)
  expect(new V.FuelBedPackingRatio() instanceof V.NonNegativeFactor).toEqual(true)
  expect(new V.FuelCoverFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.FuelCylindricalDiameter() instanceof Quantity).toEqual(true)
  expect(new V.FuelCylindricalVolume() instanceof Quantity).toEqual(true)
  expect(new V.FuelDeadFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.FuelEffectiveHeatingNumber() instanceof V.Fraction).toEqual(true)
  expect(new V.FuelEffectiveMineralContent() instanceof V.Fraction).toEqual(true)
  expect(new V.FuelHeatOfCombustion() instanceof Quantity).toEqual(true)
  expect(new V.FuelHeatOfPreignition() instanceof Quantity).toEqual(true)
  expect(new V.FuelHeatSink() instanceof Quantity).toEqual(true)
  expect(new V.FuelLabelText() instanceof Text).toEqual(true)
  expect(new V.FuelMoistureContent() instanceof Float).toEqual(true)
  expect(new V.FuelOvendryLoad() instanceof Quantity).toEqual(true)
  expect(new V.FuelParticleFiberDensity() instanceof Quantity).toEqual(true)
  expect(new V.FuelSizeClassIndex() instanceof Index).toEqual(true)
  expect(new V.FuelSurfaceArea() instanceof Quantity).toEqual(true)
  expect(new V.FuelSurfaceAreaToVolumeRatio() instanceof Quantity).toEqual(true)
  expect(new V.FuelTotalMineralContent() instanceof V.Fraction).toEqual(true)
  expect(new V.FuelVolume() instanceof Quantity).toEqual(true)
  expect(new V.IgnitionFuelDepth() instanceof Quantity).toEqual(true)
  expect(new V.IgnitionProbability() instanceof V.Fraction).toEqual(true)
  expect(new V.MapArea() instanceof Quantity).toEqual(true)
  expect(new V.MapContoursCount() instanceof Count).toEqual(true)
  expect(new V.MapDistance() instanceof Quantity).toEqual(true)
  expect(new V.MortalityFraction() instanceof V.Fraction).toEqual(true)
  expect(new V.SlopeSteepness() instanceof Slope).toEqual(true)
  expect(new V.SpottingFirebrandObject() instanceof Blob).toEqual(true)
  expect(new V.TreeBarkThickness() instanceof Quantity).toEqual(true)
  expect(new V.TreeCount() instanceof Count).toEqual(true)
  expect(new V.TreeDbh() instanceof Quantity).toEqual(true)
  expect(new V.TreeHeight() instanceof Quantity).toEqual(true)
  expect(new V.WeightingFactor() instanceof V.Fraction).toEqual(true)
  expect(new V.WindSpeed() instanceof Quantity).toEqual(true)
  expect(new V.WindSpeedAdjustmentFactor() instanceof V.Fraction).toEqual(true)
})
